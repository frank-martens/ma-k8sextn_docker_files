# Number of Threads for the Extension
numberOfThreads: 23 # 7 tasks x 3 sub tasks + 2 extra

## REQUIRED: Change "%s" with the same value as what goes in "appTierName" below
metricPrefix: "Server|Component:%s|Custom Metrics|Cluster Stats|"

## REQUIRED: Use the same value that the machine agent uses for "APPLICATION_NAME" in the "k8smonitor-deployment.yaml" file
appName: ""

## REQUIRED: Use the same value that the machine agent uses for "TIER_NAME" in the "k8smonitor-deployment.yaml" file
appTierName: ""

# Path to your kubectl Client configuration
# NOTE: Can leave this blank if POD is deployed within the Kubernetes cluster
# EXAMPLE: kubeClientConfig: "/home/origin/.kube/config"
kubeClientConfig: ""

#server or cluster
apiMode: "cluster"  #K8S_API_MODE env var

# OPTIONAL: Events API Key
# The API Key you create needs to be able to Manage and Publish Custom Analytics Events
# FIND HERE:  AppDynamics --> Analytics --> Configuration API Keys --> Add
eventsApiKey: ""

# REQUIRED: Global Account Name obtained from the controller
# FIND HERE: AppDynamics --> Settings --> License --> Accounts --> Global Account Name
accountName: ""

podsSchemaName: "k8s_pod_snapshots"

nodeSchemaName: "k8s_node_snapshots"

eventsSchemaName: "k8s_events"

deploySchemaName: "k8s_deploy_snapshots"

daemonSchemaName: "k8s_daemon_snapshots"

rsSchemaName: "k8s_rs_snapshots"

endpointSchemaName: "k8s_endpoint_snapshots"

batchSize: "100"

entities:
- type: "pod"
- type: "node"
- type: "deployment"
- type: "daemon"
- type: "replica"
- type: "event"
- type: "endpoint"

# list of nodes to collect metrics for. If all nodes need to be monitored, set name to "all"
nodes: all
#- name:

# list of namespaces to collect metrics for. If all namespaces need to be monitored, set name to "all"
namespaces: all
#- name:

# Absolute path to the dashboard template.
dashboardTemplatePath: "./templates/k8s_dashboard_template.json"

# Absolute path to the node widget template.
nodeTemplatePath: "./templates/k8s_node_template.json"

#Suffix appended to the generated dashboard name
dashboardNameSuffix: "SUMMARY"

# REQUIRED: REST API user credentials. 
# The use should have rights to create dashboards and analytics searches.
# Find the "accountname" here: AppDynamics -> Settings -> License -> Account -> Name
# FORMAT: <username>@<accountname>:<password>
# EXAMPLE: johndoe@customer:myP@assw0rd
controllerAPIUser: ""   # REST_API_CREDENTIALS env var

# REQUIRED: Controller url, including the protocol
# EXAMPLE: controllerUrl: "http://<account>.saas.appdynamics.com/controller/" 
controllerUrl: "http://<account>.saas.appdynamics.com/controller/" 

#Time in seconds between the checks if the default dashboard exists
dashboardCheckInterval: "600"

# OPTIONAL: Events Service Endpoint. These Default settings are for SaaS Users. Change if you are on Premise
eventsUrl: "https://analytics.api.appdynamics.com"  # EVENTS_API_URL env var


podsSchemaDefinition: '{
   "schema" : {
      "object_uid": "string",
      "clusterName": "string",
      "creationTimestamp": "date",
      "deletionTimestamp": "date",
      "labels": "string",
      "annotations": "string",
      "name": "string",
      "namespace": "string",
      "containerCount": "integer",
      "initContainerCount": "integer",
      "nodeName": "string",
      "priority": "integer",
      "restartPolicy": "string",
      "serviceAccountName": "string",
      "terminationGracePeriodSeconds": "integer",
      "tolerations": "string",
      "nodeAffinityPreferred": "string",
      "nodeAffinityRequired": "string",
      "hasPodAffinity": "boolean",
      "hasPodAntiAffinity": "boolean",
      "hostIP": "string",
      "phase": "string",
      "podIP": "string",
      "reason": "string",
      "startTime": "date",
      "lastTransitionTimeCondition": "date",
      "reasonCondition": "string",
      "statusCondition": "string",
      "typeCondition": "string",
      "limitsDefined": "boolean",
      "liveProbes": "integer",
      "readyProbes": "integer",
      "podRestarts": "integer",
      "numPrivileged": "integer",
      "ports": "string",
      "memRequest": "float",
      "cpuRequest": "float",
      "cpuLimit": "float",
      "memLimit": "float",
      "containerStates": "string",
      "images": "string",
      "waitReasons": "string",
      "termReasons": "string",
      "runningStartTime": "date",
      "terminationTime": "date",
      "mounts": "string"
   }
}'

nodeSchemaDefinition: '{
  "schema" : {
      "nodeName": "string",
      "clusterName": "string",
      "podCIDR": "string",
      "taints": "string",
      "phase": "string",
      "addresses": "string",
      "labels": "string",
      "role": "string",
      "cpuCapacity": "float",
      "memCapacity": "float",
      "podCapacity": "integer",
      "cpuAllocations": "float",
      "memAllocations": "float",
      "podAllocations": "integer",
      "kubeletPort": "integer",
      "osArch": "string",
      "kubeletVersion": "string",
      "runtimeVersion": "string",
      "machineID": "string",
      "osName": "string",
      "attachedVolumes": "string",
      "volumesInUse": "string",
      "ready": "string",
      "outOfDisk": "string",
      "memoryPressure": "string",
      "diskPressure": "string"
  }
}'

eventsSchemaDefinition: '{
   "schema" : {
      "firstTimestamp": "date",
      "object_kind": "string",
      "object_name": "string",
      "object_namespace": "string",
      "object_resourceVersion": "string",
      "object_uid": "string",
      "lastTimestamp": "date",
      "message": "string",
      "annotations": "string",
      "clusterName": "string",
      "creationTimestamp": "date",
      "deletionTimestamp": "date",
      "finalizers": "string",
      "generateName": "string",
      "generation": "string",
      "initializers": "string",
      "labels": "string",
      "name": "string",
      "namespace": "string",
      "ownerReferences": "string",
      "resourceVersion": "string",
      "selfLink": "string",
      "type": "string",
      "count": "string",
      "source_component": "string",
      "source_host": "string",
      "reason": "string"
   }
}'


deploySchemaDefinition: '{
  "schema": {
    "clusterName": "string",
    "name": "string",
    "namespace": "string",
    "object_uid": "string",
    "creationTimestamp": "date",
    "deletionTimestamp": "date",
    "labels": "string",
    "annotations": "string",
    "minReadySecs": "integer",
    "progressDeadlineSecs": "integer",
    "replicas": "integer",
    "revisionHistoryLimits": "integer",
    "strategy": "string",
    "maxSurge": "string",
    "maxUnavailable": "string",
    "replicasAvailable": "integer",
    "replicasUnAvailable": "integer",
    "replicasUpdated": "integer",
    "collisionCount": "integer",
    "replicasReady": "integer"
  }
}'

daemonSchemaDefinition: '{
  "schema": {
    "clusterName": "string",
    "name": "string",
    "namespace": "string",
    "object_uid": "string",
    "creationTimestamp": "date",
    "deletionTimestamp": "date",
    "minReadySecs": "integer",
    "revisionHistoryLimits": "integer",
    "replicasAvailable": "integer",
    "replicasUnAvailable": "integer",
    "collisionCount": "integer",
    "replicasReady": "integer",
    "numberScheduled": "integer",
    "desiredNumber": "integer",
    "missScheduled": "integer",
    "updatedNumberScheduled": "integer"
  }
}'


rsSchemaDefinition: '{
  "schema": {
    "clusterName": "string",
    "name": "string",
    "namespace": "string",
    "object_uid": "string",
    "creationTimestamp": "date",
    "deletionTimestamp": "date",
    "minReadySecs": "integer",
    "replicas": "integer",
    "rsReplicasAvailable": "integer",
    "rsReplicasUnAvailable": "integer",
    "replicasLabeled": "integer",
    "replicasReady": "integer"
  }
}'

endpointSchemaDefinition: '{
  "schema": {
    "name": "string",
    "clusterName": "string",
    "namespace": "string",
    "object_uid": "string",
    "creationTimestamp": "date",
    "deletionTimestamp": "date",
    "ip_up": "integer",
    "ip_down": "integer",
    "downContext": "string"
  }
}'
